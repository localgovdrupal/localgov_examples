<?php

/**
 * @file
 * Hooks for adding and configuring opting into LocalGov Services.
 */

use Drupal\Core\Entity\Display\EntityFormDisplayInterface;

/**
 * Implements hook_modules_installed().
 */
function localgov_examples_services_modules_installed($modules) {
  // This is the equivalent of localgov_examples_install() for when this module
  // is installed first and LocalGov Services later. It will also add the
  // additional fields needed for modules to work together without creating a
  // heard dependency.
  $services = in_array('localgov_services_navigation', $modules);
  if ($services) {
    // By calling optional configuration again the services entity reference
    // field is added. Pauthauto is also a dependency of Services so if that was
    // not yet enabled the pathauto pattern will also be added - this is
    // required for displaying the hierarchy.
    \Drupal::service('config.installer')->installOptionalConfig();
    // Once the field is in place the form display settings are configured.
    localgov_examples_services_optional_fields_settings($services);
  }
}

/**
 * Set form settings for optional services and topic fields on installation.
 *
 * @param bool $services
 *   If localgov_services is (being) installed.
 *
 * @see localgov_examples_services_install()
 * @see localgov_examples_services_modules_installed()
 */
function localgov_examples_services_optional_fields_settings($services) {
  $properties = [
    'targetEntityType' => 'node',
    'bundle' => 'localgov_example',
  ];
  if ($form_displays = \Drupal::entityTypeManager()->getStorage('entity_form_display')->loadByProperties($properties)) {
    foreach ($form_displays as $form_display) {
      assert($form_display instanceof EntityFormDisplayInterface);
      if ($services && !$form_display->getComponent('localgov_services_parent')) {
        $form_display->setComponent('localgov_services_parent', [
          'type' => 'entity_reference_autocomplete',
          'region' => 'content',
          'settings' => [
            'match_operator' => 'CONTAINS',
            'size' => '60',
            'placeholder' => '',
            'match_limit' => 10,
          ],
          'weight' => 51,
        ])->save();
      }
    }
  }
}
